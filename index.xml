<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LIN&#39;s Blog</title>
    <link>https://2651350543.github.io/</link>
    <description>Recent content on LIN&#39;s Blog</description>
    <image>
      <title>LIN&#39;s Blog</title>
      <url>https://2651350543.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://2651350543.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 04 Apr 2023 20:46:54 +0800</lastBuildDate><atom:link href="https://2651350543.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>快速上手MQTT——应用于PC端以及ESP32端</title>
      <link>https://2651350543.github.io/posts/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bmqtt%E5%BA%94%E7%94%A8%E4%BA%8Epc%E7%AB%AF%E4%BB%A5%E5%8F%8Aesp32%E7%AB%AF/</link>
      <pubDate>Tue, 04 Apr 2023 20:46:54 +0800</pubDate>
      
      <guid>https://2651350543.github.io/posts/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bmqtt%E5%BA%94%E7%94%A8%E4%BA%8Epc%E7%AB%AF%E4%BB%A5%E5%8F%8Aesp32%E7%AB%AF/</guid>
      <description>MQTT介绍 MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的“轻量级”通讯协议。
MQTT最大优点在于，用极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。
作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。
在这里笔者不打算做原理性的介绍，而是直接进行演示MQTT的使用过程。
MQTT 服务器 在生产环境中，正常是需要部署MQTT服务器的（或者是使用云服务器厂商的物联网平台）。笔者只是进行短暂的测试，所以使用免费的在线 MQTT 服务器。
EMQ的免费服务器为 2 个节点的 EMQX 企业版集群，部署在上海腾讯云。
EMQ 提供了通俗易懂的技术文章，帮助开发者快速了解 MQTT 协议及其相关特性。
参考EMQ的使用手册，笔者了解到进行测试需要MQTT 服务器信息。
当然，EMQ提供了MQTT客户端工具（用于快速连接和测试 MQTT 服务与应用），可以用来快速测试MQTT服务器的可用性。
在这里，笔者演示使用online-mqtt-client。步骤如下。
进入MQTT客户端工具，界面如下。 参考公共MQTT服务器地址，新建连接。
连接成功，可以看到绿色的提示符。
输入订阅的主题，发送数据。
如果此时没有订阅该主题，是无法接收到数据的，这个时候可以在客户端添加订阅进行测试（或者通过代码对该主题进行订阅）。
发送数据，得到反馈，测试成功。
PC端MQTT测试 参考文档如何在 Python 中使用 MQTT | EMQ (emqx.com)进行测试，参考文档十分详细，因此笔者只提供publish、subscribe的两个文件的代码。
publish.py(代码用于实现向/python/mqtt主题发送消息，消息内容是计数值1、2、3······)
import random import time from paho.mqtt import client as mqtt_client broker = &amp;#39;broker-cn.emqx.io&amp;#39; port = 1883 topic = &amp;#34;/python/mqtt&amp;#34; # generate client ID with pub prefix randomly client_id = f&amp;#39;python-mqtt-{random.</description>
    </item>
    
    <item>
      <title>Typora的图床设置——使用upgit</title>
      <link>https://2651350543.github.io/posts/typora%E7%9A%84%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Sun, 02 Apr 2023 11:41:38 +0800</pubDate>
      
      <guid>https://2651350543.github.io/posts/typora%E7%9A%84%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE/</guid>
      <description>Typora介绍 按照 Typora官网的说法，Typora 是一款Markdown编辑器和阅读器。
同时，Typora 也在它的网站上贴了许多标签：风格极简 、多种主题 、支持 macOS，Windows及Linux实时预览、 图片与文字、 代码块 、数学公式 、图表目录大纲、文件管理、导入与导出等。
简单来说，Typora是一款简约功能且强大的编辑器。并且Typora对不熟悉Markdown的小伙伴们十分友好，基本上可以快速上手。\(@^0^@)/
使用Typora出现的痛点 虽然Typora相比于微软的word有着简单易用、自由度高的优势，但是Typora也有比较烦人的地方。
假设出现以下场景，你写了一篇图文并茂的文档，这篇文档是需要你在不同设备上进行编辑，又或者是需要给同伴进行查看和修改的（重点是修改，如果只是阅读的话，直接导出成PDF就行了）。这个时候，由于Typora导入图片的默认规则是将图片缓存到本地电脑的某个文件夹下（这个文件夹是确定的），但是当文档传输到另一台电脑上的时候，会缺失图片路径，导致图片无法显示。
查看Typora的偏好设置，Typora对插入时图片的路径给出了三种方式：指定的本地路径、相对路径以及网络路径。显然当图片在指定的本地路径下不太容易兼容其他电脑环境，图片依然会出现丢失的情况。使用相对路径可以避免图片的丢失，但是这样操作会导致所生成的文档要带一个资源库（Typora给的文件夹名为assets），进行文档传递的时候需要进行打包传输，同时也加大了文件的体积。所以，笔者在此选择了插入图片进行网络路径转换的方式，相比于前两种方式，网络路径既解决了图片资源丢失的问题，也简化了文件的结构（文档只是一份md文件，不需要assets存放图片资源）。
我的解决方式 再次查看Typora的偏好设置，发现其上传服务主要是PicGo、PicGo-Core和Custom Command。
查阅PicGo和PicGo-Core的使用文档，发现PicGo是不够轻量化的，大小是119 MB，而且是Electron开发，效率不高，而PicGo-Core是PicGo的核心底层核心组件（上传流程系统），虽然相比PicGo是轻量化的，但是需要nodejs环境，对环境有依赖。所以重点就来到了Custom Command，本着功能需要高内聚、低耦合的目标，笔者找到一款名叫upgit的简洁跨平台，不常驻内存的上传工具。
参考upgit的说明文档，可以快速上手体验。下面是笔者配置upgit的大致流程。
下载Release Upgit v0.2.18。
解压到存放应用的目录（其他位置也行，只要你能找到），重命名文件夹和程序名。
在程序的同一目录创建 config.toml文件，参考upgit的README.md文档，有示例配置如下。
# ============================================================================= # UPGIT 配置 # ============================================================================= # 默认上传器 default_uploader = &amp;#34;github&amp;#34; # 上传文件名的格式模板（仅特定上传器适配） # / 目录分隔符, 作用: 是区分目录 # {year} 年份, 例如: 2022 # {month} 月份, 例如: 02 # {day} 天, 例如: 01 # {unix_ts} 时间戳, 例如: 1643617626 # {fname} 原始文件名，如 logo (不含后缀名) # {fname_hash} {fname}的 MD5 散列值 # {ext} 文件后缀名, 例如.</description>
    </item>
    
    <item>
      <title>搭建博客  以hugo和halo为例</title>
      <link>https://2651350543.github.io/posts/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2--%E4%BB%A5hugo%E5%92%8Chalo%E4%B8%BA%E4%BE%8B/</link>
      <pubDate>Thu, 30 Mar 2023 15:03:01 +0800</pubDate>
      
      <guid>https://2651350543.github.io/posts/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2--%E4%BB%A5hugo%E5%92%8Chalo%E4%B8%BA%E4%BE%8B/</guid>
      <description>1.博客的现状 现在网络上有很多的博客平台，比如CSDN、掘金、简书、博客园、知乎等等。在搜索引擎搜索相关内容时，往往前面几篇都被这几个大平台垄断了，个人博客一般隐藏在后面，如果没有做SEO优化，甚至完全搜不到，而很多优质的文章都藏在个人博客里面，现在很多静态博客都会和Github结合起来搭建，而Github屏蔽了百度的爬虫抓取，所以在百度很难搜到搭建在GitHub的个人博客，这是一大遗憾。
Tips: SEO是指按照搜索引擎的算法，提升你的文章在搜索引擎中的自然排名。 2.博客的分类 博客一般可以分为静态博客和动态博客。
静态博客：一般来说只有前端展示，即直接渲染生成HTML标准的文件呈现给客户端，没有后端数据库支持的博客叫做静态博客。此类博客比较轻量级，部署简单，成本较低，速度也很快，安全性高。
动态博客：动态指的是前端html和css等展示是通过动态调用再解析而成，不是生成的现成静态文件，且会与后台数据库进行交互，进行数据传递。
Tips: 通俗理解就是静态博客不需要使用服务器，而动态博客需要使用服务器进行交互。 3.动态博客搭建(halo) 当手中有一台云服务器（或者有一台具有公网IP的电脑），可以使用这种博客搭建方式。下面是以云服务器为例的具体搭建方法。
SSH远程连接云服务器终端(使用mobaxterm)
以下是服务器登录后的终端界面
Welcome to Ubuntu 20.04.5 LTS (GNU/Linux 5.4.0-90-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage * Introducing Expanded Security Maintenance for Applications. Receive updates to over 25,000 software packages with your Ubuntu Pro subscription. Free for personal use. https://ubuntu.com/pro New release &amp;#39;22.04.2 LTS&amp;#39; available. Run &amp;#39;do-release-upgrade&amp;#39; to upgrade to it. Welcome to Alibaba Cloud Elastic Compute Service !</description>
    </item>
    
    <item>
      <title>HelloWorld</title>
      <link>https://2651350543.github.io/posts/helloworld/</link>
      <pubDate>Thu, 30 Mar 2023 14:56:22 +0800</pubDate>
      
      <guid>https://2651350543.github.io/posts/helloworld/</guid>
      <description>这是一篇测试博客
#include &amp;lt;stdio.h&amp;gt; int main() { printf(&amp;#34;Hello, World!&amp;#34;); return 0; } 文章发布成功！</description>
    </item>
    
    <item>
      <title>欢迎来到我的小站，很高兴遇见你！🤝</title>
      <link>https://2651350543.github.io/introduction/</link>
      <pubDate>Thu, 30 Mar 2023 13:35:32 +0800</pubDate>
      
      <guid>https://2651350543.github.io/introduction/</guid>
      <description>👨‍🎓个人信息 标准的一名00后，目前还在上学🏫 坐标江苏·无锡🌏 对一切新鲜的事物充满好奇，有一点点点喜欢折腾🛠️ 目标是成为一名出色的工程师 💪 好好学习，天天向上 👊 📝我的博客 博客建立初衷是想记录生活点滴，学习笔记，遐想，随笔，日志等等，于时光中相遇，于岁月中相知 欢迎各位小伙伴来互换友链，欢迎高质量，原创高产，有创意的博主 写博客要是只图一时兴起，很容易写个几篇，但时间久了，就很难经得起考验了，愿笔者与诸君共勉,一起保持着彼此网站的访问，共同进步~ </description>
    </item>
    
    <item>
      <title>小伙伴们</title>
      <link>https://2651350543.github.io/friends/</link>
      <pubDate>Thu, 30 Mar 2023 13:31:17 +0800</pubDate>
      
      <guid>https://2651350543.github.io/friends/</guid>
      <description>这里是LIN的朋友和同学的博客链接，LIN会一直更新的 o(￣┰￣*)ゞ
LIN 这是友链介绍~ </description>
    </item>
    
  </channel>
</rss>
